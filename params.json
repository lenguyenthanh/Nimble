{"name":"Nimble","tagline":"Nimble is a small, quick and flexible Model-View-Presenter library for Android","body":"# Nimble [![Build Status](https://travis-ci.org/lenguyenthanh/nimble.svg?branch=master)](https://travis-ci.org/lenguyenthanh/nimble) [![codecov.io](https://codecov.io/github/lenguyenthanh/nimble/coverage.svg?branch=master)](https://codecov.io/github/lenguyenthanh/nimble?branch=master)\r\n\r\nNimble is a small, quick and flexible Model-View-Presenter library for Android\r\n\r\n### Android Model-View-Presenter(Mvp)\r\nMvp is a architectural pattern, and is to used mostly for front end. It has three main parts:\r\n* The **model** should be a simple Java object, is used to store data to present to user.\r\n* The **View** is used to display data to user. It should be a [passive view](http://martinfowler.com/eaaDev/PassiveScreen.html).\r\n* The **presenter** acts upon the model and the view. It retrieves data from repositories (the model), and formats it for display in the view.\r\n\r\nThere are some other definitions which specifics for Android (Thanks [Christian](https://twitter.com/panavtec) for his great [article](http://panavtec.me/modeling-presentation-layer/)):\r\n* **Android view**: Just an Android component, something that extends from android.view.View\r\n* **View**: The view interface to communicate from your presenter to your view implementation, it can be implemented in your preferred Android component, sometimes is better to use an Activity others a Fragment or maybe a Custom View.\r\n* **Screen**: A screen is more a user concept, the user gets the feeling that the phone is navigating between windows, but we can represent this in Android with Activities or replacing fragments/views in the same Activity. So it depends on the perception that the user gets and usually represents all the content that you can see in the view.\r\n\r\n### Why Nimble\r\n* It has totally 500 lines of code. So it is simple and easy to work with. You don't really need to take alot of time to understand it.\r\n* It has well tested code so you can confident when using it.\r\n* It is designed to be used with Dagger but you can use it any way you like. It is so flexible.\r\n* It can be used as multiple Mvp components in one screen as well as, one Mvp for multiple screens.\r\n* It provides mechanism to save data when activity/fragment/view is recreated throws Bundle class.\r\n\r\n### Usage\r\nNimble has two basic interface [NimbleView](https://github.com/lenguyenthanh/nimble/blob/master/nimble-core/src/main/java/com/lenguyenthanh/nimble/NimbleView.java) and [NimblePresenter](https://github.com/lenguyenthanh/nimble/blob/master/nimble-core/src/main/java/com/lenguyenthanh/nimble/NimblePresenter.java). They are base interfaces for ant views and presenters.\r\n\r\nYou should follow these steps to create a Mvp component in your application:\r\n\r\n1. Create a View interface which must extents NimbleView:\r\n\r\n  ```java\r\n  public interface MainView extends NimbleView {\r\n      void showUser(User user);\r\n  }\r\n  ```\r\n2. Create a Presenter interface which must extent NimblePresenter with View generic like:\r\n\r\n  ```java\r\n  public interface MainPresenter extends NimblePresenter<MainView> {\r\n      void getUser();\r\n  }\r\n  ```\r\n3. Implement your Presenter which should extent [BasePresenter](https://github.com/lenguyenthanh/nimble/blob/master/nimble-core/src/main/java/com/lenguyenthanh/nimble/BasePresenter.java):\r\n\r\n  ```java\r\n  public class MainPresenterImpl extends BasePresenter<MainView> implements MainPresenter {\r\n      public void getUser(){\r\n          User user = ...\r\n          getView().showUser(user);\r\n      }\r\n  }\r\n  ```\r\n4. Implement your View which should extent base Nimble Views such as [NimbleActivity](https://github.com/lenguyenthanh/nimble/blob/master/nimble-core/src/main/java/com/lenguyenthanh/nimble/view/NimbleActivity.java):\r\n\r\n  ```java\r\n  public class MainActivity extends NimbleActivity<MainView> {\r\n\r\n      @Override\r\n      protected MainPresenter presenter() {\r\n          return presenter;\r\n      }\r\n    \r\n      @Override\r\n      protected void onCreate(Bundle savedInstanceState) {\r\n          super.onCreate(savedInstanceState);\r\n          presenter().getUser();\r\n      }\r\n  }\r\n  ```\r\n\r\nCongratulation!!! You have a Mvp component now.\r\n\r\n### Inspiration\r\n\r\nNimble has a lot of inspiration from other great MVP libraries for Android:\r\n\r\n* Mortar - https://github.com/square/mortar\r\n* Nucleus - https://github.com/konmik/nucleus\r\n* Mosby - https://github.com/sockeqwe/mosby\r\n\r\n### Version\r\n0.5.0\r\n\r\n## Installation\r\nJust clone and copy/paste. I am trying to publish it to Jcenter() and maven() center. So sorry for any inconvenient. Will be updated soon.\r\n\r\n### License\r\n\r\n    Copyright (C) 2016 Thanh Le\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"UA-33060032-6","note":"Don't delete this file! It's used internally to help with page regeneration."}